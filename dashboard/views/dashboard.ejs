
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Discord Bot Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }
        .sidebar {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
        }
        .sidebar .nav-link {
            color: rgba(255, 255, 255, 0.8);
            border-radius: 8px;
            margin: 2px 0;
        }
        .sidebar .nav-link:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
        }
        .sidebar .nav-link.active {
            background-color: rgba(255, 255, 255, 0.2);
            color: white;
        }
        .stats-card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        .content-section {
            display: none;
        }
        .content-section.active {
            display: block;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <div class="col-md-3 col-lg-2 sidebar p-3">
                <div class="text-center mb-4">
                    <h4>Bot Dashboard</h4>
                    <small>Welcome, <%= user.name %>!</small>
                </div>
                
                <nav class="nav flex-column">
                    <a class="nav-link active" href="#" data-section="overview">
                        <i class="fas fa-tachometer-alt me-2"></i> Overview
                    </a>
                    <a class="nav-link" href="#" data-section="guilds">
                        <i class="fas fa-server me-2"></i> Servers
                    </a>
                    <a class="nav-link" href="#" data-section="commands">
                        <i class="fas fa-terminal me-2"></i> Commands
                    </a>
                    <a class="nav-link" href="#" data-section="moderation">
                        <i class="fas fa-shield-alt me-2"></i> Moderation
                    </a>
                    <a class="nav-link" href="#" data-section="automod">
                        <i class="fas fa-robot me-2"></i> AutoMod
                    </a>
                    <a class="nav-link" href="#" data-section="giveaways">
                        <i class="fas fa-gift me-2"></i> Giveaways
                    </a>
                    <a class="nav-link" href="#" data-section="logs">
                        <i class="fas fa-file-alt me-2"></i> Logs
                    </a>
                    <a class="nav-link" href="#" data-section="settings">
                        <i class="fas fa-cog me-2"></i> Settings
                    </a>
                </nav>
                
                <div class="mt-auto pt-4">
                    <small class="text-light">Bot Status: <span class="badge bg-success">Online</span></small>
                </div>
            </div>

            <!-- Main Content -->
            <div class="col-md-9 col-lg-10 p-4">
                <!-- Overview Section -->
                <div id="overview" class="content-section active">
                    <h2>Bot Overview</h2>
                    <div class="row mt-4">
                        <div class="col-md-4 mb-3">
                            <div class="card stats-card">
                                <div class="card-body text-center">
                                    <i class="fas fa-server fa-2x text-primary mb-2"></i>
                                    <h3><%= stats.guilds %></h3>
                                    <p class="text-muted">Servers</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <div class="card stats-card">
                                <div class="card-body text-center">
                                    <i class="fas fa-users fa-2x text-success mb-2"></i>
                                    <h3><%= stats.users %></h3>
                                    <p class="text-muted">Users</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <div class="card stats-card">
                                <div class="card-body text-center">
                                    <i class="fas fa-clock fa-2x text-warning mb-2"></i>
                                    <h3 id="uptime"><%= Math.floor(stats.uptime / 3600) %>h</h3>
                                    <p class="text-muted">Uptime</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Guilds Section -->
                <div id="guilds" class="content-section">
                    <h2>Servers</h2>
                    <div class="row mt-4" id="guilds-container">
                        <p>Loading servers...</p>
                    </div>
                </div>

                <!-- Commands Section -->
                <div id="commands" class="content-section">
                    <h2>Bot Commands</h2>
                    <div class="mt-4" id="commands-container">
                        <p>Loading commands...</p>
                    </div>
                </div>

                <!-- Moderation Section -->
                <div id="moderation" class="content-section">
                    <h2>Moderation Tools</h2>
                    <div class="row mt-4">
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6>Recent Warnings</h6>
                                </div>
                                <div class="card-body" id="warnings-container">
                                    <p>Loading warnings...</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6>Quick Actions</h6>
                                </div>
                                <div class="card-body">
                                    <button class="btn btn-warning btn-sm me-2 mb-2">Clear All Warnings</button>
                                    <button class="btn btn-info btn-sm me-2 mb-2">Export Warnings</button>
                                    <button class="btn btn-secondary btn-sm mb-2">Moderation Stats</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- AutoMod Section -->
                <div id="automod" class="content-section">
                    <h2>AutoMod Settings</h2>
                    <div class="row mt-4">
                        <div class="col-md-8">
                            <div class="card">
                                <div class="card-body">
                                    <h5>AutoMod Configuration</h5>
                                    <div class="form-check mb-3">
                                        <input class="form-check-input" type="checkbox" id="automod-enabled">
                                        <label class="form-check-label" for="automod-enabled">
                                            Enable AutoMod
                                        </label>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Spam Detection</label>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="spam-detection">
                                            <label class="form-check-label" for="spam-detection">
                                                Detect repeated messages
                                            </label>
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Profanity Filter</label>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="profanity-filter">
                                            <label class="form-check-label" for="profanity-filter">
                                                Filter inappropriate language
                                            </label>
                                        </div>
                                    </div>
                                    <button class="btn btn-primary" onclick="updateAutoMod()">Save Settings</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Giveaways Section -->
                <div id="giveaways" class="content-section">
                    <h2>Giveaway Management</h2>
                    <div class="row mt-4">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header d-flex justify-content-between">
                                    <h6>Active Giveaways</h6>
                                    <button class="btn btn-success btn-sm">Create New Giveaway</button>
                                </div>
                                <div class="card-body" id="giveaways-container">
                                    <p>Loading giveaways...</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Logs Section -->
                <div id="logs" class="content-section">
                    <h2>Bot Logs</h2>
                    <div class="row mt-4">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header d-flex justify-content-between">
                                    <h6>Recent Activity</h6>
                                    <button class="btn btn-outline-primary btn-sm" onclick="refreshLogs()">Refresh</button>
                                </div>
                                <div class="card-body">
                                    <div id="logs-container" style="max-height: 400px; overflow-y: auto; font-family: monospace; background: #f8f9fa; padding: 15px; border-radius: 5px;">
                                        <p>Loading logs...</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Settings Section -->
                <div id="settings" class="content-section">
                    <h2>Bot Settings</h2>
                    <div class="row mt-4">
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-body">
                                    <h5>Bot Prefix</h5>
                                    <div class="input-group">
                                        <input type="text" class="form-control" id="prefix-input" value="<%= config.prefix %>" maxlength="5">
                                        <button class="btn btn-primary" onclick="updatePrefix()">Update</button>
                                    </div>
                                    <small class="text-muted">Current prefix: <code><%= config.prefix %></code></small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-body">
                                    <h5>Bot Status</h5>
                                    <div class="mb-3">
                                        <label class="form-label">Status</label>
                                        <select class="form-select" id="status-select">
                                            <option value="online">Online</option>
                                            <option value="idle">Idle</option>
                                            <option value="dnd">Do Not Disturb</option>
                                            <option value="invisible">Invisible</option>
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Activity Type</label>
                                        <select class="form-select" id="activity-type">
                                            <option value="PLAYING">Playing</option>
                                            <option value="LISTENING">Listening</option>
                                            <option value="WATCHING">Watching</option>
                                            <option value="COMPETING">Competing</option>
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Activity Text</label>
                                        <input type="text" class="form-control" id="activity-text" placeholder="What the bot is doing">
                                    </div>
                                    <button class="btn btn-primary" onclick="updateBotStatus()">Update Status</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-4">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-body">
                                    <h5>Bot Control</h5>
                                    <button class="btn btn-warning me-2" onclick="restartBot()">Restart Bot</button>
                                    <button class="btn btn-info me-2" onclick="exportLogs()">Export Logs</button>
                                    <button class="btn btn-secondary" onclick="clearCache()">Clear Cache</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Navigation
        document.querySelectorAll('[data-section]').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const section = e.target.getAttribute('data-section');
                
                // Update active nav
                document.querySelectorAll('.nav-link').forEach(nl => nl.classList.remove('active'));
                e.target.classList.add('active');
                
                // Show section
                document.querySelectorAll('.content-section').forEach(cs => cs.classList.remove('active'));
                document.getElementById(section).classList.add('active');
                
                // Load section data
                if (section === 'guilds') loadGuilds();
                if (section === 'commands') loadCommands();
                if (section === 'moderation') loadWarnings();
                if (section === 'automod') loadAutoMod();
                if (section === 'giveaways') loadGiveaways();
                if (section === 'logs') loadLogs();
            });
        });

        // Load guilds
        async function loadGuilds() {
            try {
                const response = await fetch('/api/guilds');
                const guilds = await response.json();
                const container = document.getElementById('guilds-container');
                
                if (guilds.length === 0) {
                    container.innerHTML = '<p>No servers found.</p>';
                    return;
                }
                
                container.innerHTML = guilds.map(guild => `
                    <div class="col-md-4 mb-3">
                        <div class="card">
                            <div class="card-body">
                                <h6>${guild.name}</h6>
                                <small class="text-muted">${guild.memberCount} members</small>
                            </div>
                        </div>
                    </div>
                `).join('');
            } catch (error) {
                document.getElementById('guilds-container').innerHTML = '<p>Error loading servers.</p>';
            }
        }

        // Load commands
        async function loadCommands() {
            try {
                const response = await fetch('/api/commands');
                const commands = await response.json();
                const container = document.getElementById('commands-container');
                
                if (commands.length === 0) {
                    container.innerHTML = '<p>No commands found.</p>';
                    return;
                }
                
                const grouped = commands.reduce((acc, cmd) => {
                    if (!acc[cmd.category]) acc[cmd.category] = [];
                    acc[cmd.category].push(cmd);
                    return acc;
                }, {});
                
                container.innerHTML = Object.entries(grouped).map(([category, cmds]) => `
                    <div class="card mb-3">
                        <div class="card-header">
                            <h6>${category}</h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                ${cmds.map(cmd => `
                                    <div class="col-md-6 mb-2">
                                        <strong>${cmd.name}</strong><br>
                                        <small class="text-muted">${cmd.description}</small>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    </div>
                `).join('');
            } catch (error) {
                document.getElementById('commands-container').innerHTML = '<p>Error loading commands.</p>';
            }
        }

        // Load warnings
        async function loadWarnings() {
            try {
                const response = await fetch('/api/warnings');
                const warnings = await response.json();
                const container = document.getElementById('warnings-container');
                
                if (Object.keys(warnings).length === 0) {
                    container.innerHTML = '<p>No warnings found.</p>';
                    return;
                }
                
                let html = '';
                Object.entries(warnings).forEach(([userId, userWarnings]) => {
                    html += `<div class="mb-2"><strong>User ${userId}:</strong> ${userWarnings.length} warnings</div>`;
                });
                container.innerHTML = html;
            } catch (error) {
                document.getElementById('warnings-container').innerHTML = '<p>Error loading warnings.</p>';
            }
        }

        // Load automod settings
        async function loadAutoMod() {
            try {
                const response = await fetch('/api/automod');
                const automod = await response.json();
                
                document.getElementById('automod-enabled').checked = automod.enabled || false;
                document.getElementById('spam-detection').checked = automod.spamDetection || false;
                document.getElementById('profanity-filter').checked = automod.profanityFilter || false;
            } catch (error) {
                console.error('Error loading automod settings');
            }
        }

        // Update automod settings
        async function updateAutoMod() {
            const settings = {
                enabled: document.getElementById('automod-enabled').checked,
                spamDetection: document.getElementById('spam-detection').checked,
                profanityFilter: document.getElementById('profanity-filter').checked
            };
            
            try {
                const response = await fetch('/api/automod', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(settings)
                });
                
                if (response.ok) {
                    alert('AutoMod settings updated successfully!');
                } else {
                    alert('Failed to update AutoMod settings');
                }
            } catch (error) {
                alert('Error updating AutoMod settings');
            }
        }

        // Load giveaways
        async function loadGiveaways() {
            try {
                const response = await fetch('/api/giveaways');
                const giveaways = await response.json();
                const container = document.getElementById('giveaways-container');
                
                if (Object.keys(giveaways).length === 0) {
                    container.innerHTML = '<p>No active giveaways.</p>';
                    return;
                }
                
                let html = '';
                Object.entries(giveaways).forEach(([id, giveaway]) => {
                    html += `
                        <div class="alert alert-info">
                            <strong>${giveaway.prize || 'Unknown Prize'}</strong><br>
                            <small>Ends: ${new Date(giveaway.endTime).toLocaleString()}</small>
                        </div>
                    `;
                });
                container.innerHTML = html;
            } catch (error) {
                document.getElementById('giveaways-container').innerHTML = '<p>Error loading giveaways.</p>';
            }
        }

        // Load logs
        async function loadLogs() {
            try {
                const response = await fetch('/api/logs');
                const logs = await response.json();
                const container = document.getElementById('logs-container');
                
                if (logs.length === 0) {
                    container.innerHTML = '<p>No logs available.</p>';
                    return;
                }
                
                container.innerHTML = logs.map(log => `<div>${log}</div>`).join('');
            } catch (error) {
                document.getElementById('logs-container').innerHTML = '<p>Error loading logs.</p>';
            }
        }

        // Refresh logs
        function refreshLogs() {
            loadLogs();
        }

        // Update bot status
        async function updateBotStatus() {
            const status = document.getElementById('status-select').value;
            const activityType = document.getElementById('activity-type').value;
            const activityText = document.getElementById('activity-text').value;
            
            try {
                const response = await fetch('/api/bot/status', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ status, activityType, activityText })
                });
                
                if (response.ok) {
                    alert('Bot status updated successfully!');
                } else {
                    alert('Failed to update bot status');
                }
            } catch (error) {
                alert('Error updating bot status');
            }
        }

        // Restart bot
        async function restartBot() {
            if (!confirm('Are you sure you want to restart the bot?')) return;
            
            try {
                const response = await fetch('/api/bot/restart', {
                    method: 'POST'
                });
                
                if (response.ok) {
                    alert('Bot is restarting...');
                } else {
                    alert('Failed to restart bot');
                }
            } catch (error) {
                alert('Error restarting bot');
            }
        }

        // Export logs
        function exportLogs() {
            alert('Export logs feature coming soon!');
        }

        // Clear cache
        function clearCache() {
            alert('Clear cache feature coming soon!');
        }

        // Update prefix
        async function updatePrefix() {
            const prefix = document.getElementById('prefix-input').value;
            if (!prefix) return;
            
            try {
                const response = await fetch('/api/config/prefix', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ prefix })
                });
                
                if (response.ok) {
                    alert('Prefix updated successfully!');
                } else {
                    alert('Failed to update prefix');
                }
            } catch (error) {
                alert('Error updating prefix');
            }
        }
    </script>
</body>
</html>
